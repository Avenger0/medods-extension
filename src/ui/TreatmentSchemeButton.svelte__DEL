<!-- src/ui/TreatmentSchemeButton.svelte -->
<script>
    // Импортируем все созданные компоненты
    import ExistingSchemes from './ExistingSchemes.svelte';
    import CreateSchemeButton from './CreateSchemeButton.svelte';
    import TreatmentModal from './TreatmentModal.svelte';
    
    export let serviceId = null;
    export let medicalCardId = null;
    
    // Стилевые настройки для кастомизации
    // Основная модалка
    export let modalMaxWidth = '1100px';
    export let modalBgColor = 'white';
    export let modalBorderRadius = '8px';
    export let modalOverlayColor = 'rgba(0,0,0,0.5)';
    
    // Список схем
    export let schemesBgColor = '#f8f9fa';
    export let schemesTitleColor = '#333';
    export let schemesBorderColor = '#e9ecef';
    
    // Элементы схем
    export let schemeItemBgColor = '#f8f9fa';
    export let schemeItemHoverColor = '#e9ecef';
    export let schemeItemBorderColor = '#e9ecef';
    export let schemeTitleColor = '#333';
    export let schemeDetailsColor = '#6c757d';
    
    // Кнопки действий со схемами
    export let useButtonBgColor = '#007bff';
    export let useButtonTextColor = '#fff';
    export let editButtonBgColor = '#6c757d';
    export let editButtonTextColor = '#fff';
    
    // Кнопка создания новой схемы
    export let createButtonBgColor = '#28a745';
    export let createButtonTextColor = '#fff';
    export let createButtonHoverColor = '#218838';
    export let createButtonBorderRadius = '4px';
    
    // Кнопка основная
    export let mainButtonBgColor = '#007bff';
    export let mainButtonTextColor = 'white';
    export let mainButtonBorderRadius = '4px';
    
    let isModalOpen = false;
    let isCreatingNewScheme = false;
    let medications = [
        { id: 1, name: 'Цефтриаксон', type: 'в/м' },
        { id: 2, name: 'Метронидазол', type: 'в/в' },
        { id: 3, name: 'Ибупрофен', type: 'в/м' }
    ];

    let validationError = '';
    let isLoading = false;

    let medicationForm = {
        medication: medications[0],
        administrationType: 'в/м',
        dosage: '',
        hasDiluent: 'нет',
        diluents: [] // Массив растворителей вместо единичных полей
    };
    
    let editingMedicationId = null;
    let currentEditingScheme = null;

    let selectedMedications = [];
    let selectedDays = {};

    let existingSchemes = [
        { 
            id: 1, 
            name: 'Схема лечения №1', 
            medications: [
                { 
                    id: 101, 
                    name: 'Цефтриаксон', 
                    dosage: '1г', 
                    администрationType: 'в/м',
                    diluents: [
                        { id: 1001, type: 'физраствор', dosage: '2мл' }
                    ]
                }
            ],
            schedule: {
                101: { 1: [1, 3, 5, 7, 9] }
            }
        },
        { 
            id: 2, 
            name: 'Схема лечения №2', 
            medications: [
                { 
                    id: 201, 
                    name: 'Метронидазол', 
                    dosage: '500мг', 
                    администрationType: 'в/в',
                    diluents: [
                        { id: 2001, type: 'глюкоза', dosage: '100мл' },
                        { id: 2002, type: 'физраствор', dosage: '50мл' }
                    ]
                }
            ],
            schedule: {
                201: { 1: [1, 2, 3, 4, 5] }
            }
        }
    ];

    $: isScheduleValid = selectedMedications.length > 0 && 
    selectedMedications.every(medication => 
        selectedDays[medication.id] && 
        Object.values(selectedDays[medication.id]).some(daySet => daySet.size > 0)
    );

    // Реактивная проверка формы
    $: isFormValid = !!(
        medicationForm.medication &&
        medicationForm.administrationType &&
        medicationForm.dosage &&
        (medicationForm.hasDiluent === 'нет' || 
        (medicationForm.hasDiluent === 'да' && 
        medicationForm.diluents.length > 0 && 
        medicationForm.diluents.every(d => d.type && d.dosage)))
    );

    function addDiluent() {
        medicationForm.diluents = [
            ...medicationForm.diluents,
            { id: Date.now(), type: '', dosage: '' }
        ];
    }

    function editMedication(medication) {
        // Заполняем форму данными выбранного препарата
        medicationForm = {
            medication: medications.find(m => m.name === medication.medication.name) || medications[0],
            administrationType: medication.administrationType,
            dosage: medication.dosage,
            hasDiluent: medication.hasDiluent,
            diluents: [...medication.diluents]
        };
        
        // Запоминаем ID редактируемого препарата
        editingMedicationId = medication.id;
    }

    function deleteMedication(medicationId) {
        // Удаляем препарат из списка
        selectedMedications = selectedMedications.filter(med => med.id !== medicationId);
        
        // Удаляем расписание для этого препарата
        if (selectedDays[medicationId]) {
            delete selectedDays[medicationId];
            selectedDays = {...selectedDays}; // Триггерим реактивность
        }
        
        // Сбрасываем редактирование, если удаляем тот препарат, который сейчас редактируется
        if (editingMedicationId === medicationId) {
            resetMedicationForm();
        }
        
        // Сбрасываем ошибку валидации
        validationError = '';
    }

    function removeDiluent(id) {
        medicationForm.diluents = medicationForm.diluents.filter(d => d.id !== id);
    }

    function toggleModal() {
        isModalOpen = !isModalOpen;
        if (!isModalOpen) {
            resetState();
        }
    }

    function resetState() {
        medicationForm = {
            medication: medications[0],
            administrationType: 'в/м',
            dosage: '',
            hasDiluent: 'нет',
            diluents: []
        };
        selectedMedications = [];
        selectedDays = {};
        isCreatingNewScheme = false;
        currentEditingScheme = null;
        validationError = '';
    }

    function addMedication() {
        if (isFormValid) {
            if (editingMedicationId) {
                // Обновление существующего препарата
                selectedMedications = selectedMedications.map(med => {
                    if (med.id === editingMedicationId) {
                        return {
                            ...medicationForm,
                            id: med.id
                        };
                    }
                    return med;
                });
                
                // Сбрасываем режим редактирования
                editingMedicationId = null;
            } else {
                // Добавление нового препарата
                const newMedication = { 
                    ...medicationForm,
                    id: Date.now() // уникальный идентификатор
                };
                
                selectedMedications = [...selectedMedications, newMedication];
            }
            
            // Сбрасываем форму
            resetMedicationForm();
        }
    }

    function resetMedicationForm() {
        medicationForm = {
            medication: medications[0],
            administrationType: 'в/м',
            dosage: '',
            hasDiluent: 'нет',
            diluents: []
        };
        editingMedicationId = null;
    }

    function toggleDay(medicationId, week, day) {
        if (!selectedDays[medicationId]) {
            selectedDays[medicationId] = {};
        }
        
        if (!selectedDays[medicationId][week]) {
            selectedDays[medicationId][week] = new Set();
        }

        if (selectedDays[medicationId][week].has(day)) {
            selectedDays[medicationId][week].delete(day);
        } else {
            selectedDays[medicationId][week].add(day);
        }

        // Триггерим реактивность
        selectedDays = {...selectedDays};

        validationError = '';
    }

    function selectExistingScheme(scheme) {
        console.log('Выбрана схема:', scheme);
        
        // Загрузка выбранной схемы в текущий план лечения
        selectedMedications = scheme.medications.map(med => {
            const medId = med.id || Date.now() + Math.random();
            
            return {
                id: medId,
                medication: { name: med.name },
                administrationType: med.администрationType,
                dosage: med.dosage,
                hasDiluent: med.diluents && med.diluents.length > 0 ? 'да' : 'нет',
                diluents: med.diluents || []
            };
        });
        
        // Восстанавливаем расписание
        selectedDays = {};
        
        if (scheme.schedule) {
            Object.entries(scheme.schedule).forEach(([medId, weeks]) => {
                selectedDays[medId] = {};
                
                Object.entries(weeks).forEach(([week, days]) => {
                    selectedDays[medId][week] = new Set(days);
                });
            });
        }
        
        isCreatingNewScheme = true;
        toggleModal();
        validationError = '';
    }

    function startNewScheme() {
        isCreatingNewScheme = true;
        selectedMedications = [];
        selectedDays = {};
        validationError = '';
    }

    function publishTreatmentScheme() {
        // Проверка валидности расписания
        const medicationsWithoutSchedule = selectedMedications.filter(medication => 
            !selectedDays[medication.id] || 
            !Object.values(selectedDays[medication.id]).some(daySet => daySet.size > 0)
        );

        if (medicationsWithoutSchedule.length > 0) {
            // Устанавливаем сообщение об ошибке
            const medicationNames = medicationsWithoutSchedule.map(med => med.medication.name).join(', ');
            validationError = `Не выбрано ни одного дня для препаратов: ${medicationNames}`;
            return;
        }
        try {
            isLoading = true; // Устанавливаем флаг загрузки
            
            // Преобразуем Set обратно в массивы для хранения
            const formattedSchedule = {};
            
            Object.entries(selectedDays).forEach(([medId, weeks]) => {
                formattedSchedule[medId] = {};
                
                Object.entries(weeks).forEach(([week, days]) => {
                    formattedSchedule[medId][week] = Array.from(days);
                });
            });
            
            // Создание новой схемы или редакции
            const newScheme = {
                id: Date.now(),
                name: currentEditingScheme 
                    ? `${currentEditingScheme.name} (редакция от ${new Date().toLocaleDateString()})` 
                    : `Схема лечения от ${new Date().toLocaleDateString()}`,
                medications: selectedMedications.map(med => ({
                    id: med.id,
                    name: med.medication.name,
                    dosage: med.dosage,
                    администрationType: med.administrationType,
                    hasDiluent: med.hasDiluent,
                    diluent: med.diluent,
                    diluentDosage: med.diluentDosage
                })),
                createdFor: {
                    serviceId,
                    medicalCardId
                },
                createdAt: new Date().toISOString(),
                isRevision: !!currentEditingScheme,
                originalSchemeId: currentEditingScheme ? currentEditingScheme.id : null,
                schedule: formattedSchedule
            };
            
            // Имитация задержки загрузки (в реальном приложении здесь будет API-запрос)
            setTimeout(() => {
                // Добавляем в существующие схемы
                existingSchemes = [...existingSchemes, newScheme];
                
                console.log('Опубликована схема лечения', newScheme);
                
                // Сбрасываем состояние загрузки
                isLoading = false;
                
                // Закрыть модальное окно
                toggleModal();
            }, 1000); // Имитация задержки сервера в 1 секунду
            
        } catch (err) {
            console.error('Ошибка публикации схемы:', err);
            isLoading = false; // Сбрасываем флаг загрузки в случае ошибки
        }
    }

    function editExistingScheme(scheme) {
        console.log('Редактирование схемы:', scheme);
        
        // Загрузка препаратов схемы
        selectedMedications = scheme.medications.map(med => {
            // Используем существующий ID или генерируем новый
            const medId = med.id || Date.now() + Math.random();
            
            return {
                id: medId,
                medication: { name: med.name },
                administrationType: med.администрationType,
                dosage: med.dosage,
                hasDiluent: med.diluents && med.diluents.length > 0 ? 'да' : 'нет',
                diluents: med.diluents || []
            };
        });
        
        // Восстанавливаем расписание
        selectedDays = {};
        
        if (scheme.schedule) {
            // Преобразуем формат расписания из массивов в Set для использования в UI
            Object.entries(scheme.schedule).forEach(([medId, weeks]) => {
                selectedDays[medId] = {};
                
                Object.entries(weeks).forEach(([week, days]) => {
                    selectedDays[medId][week] = new Set(days);
                });
            });
        }
        
        // Переключаемся в режим создания схемы с пометкой, что это редакция
        isCreatingNewScheme = true;
        currentEditingScheme = scheme;
        validationError = '';
    }
</script>

<div class="treatment-scheme-container">
    <button 
        on:click={toggleModal} 
        class="treatment-scheme-button"
        style="--bg-color: {mainButtonBgColor}; --text-color: {mainButtonTextColor}; --border-radius: {mainButtonBorderRadius};"
    >
        📋 Схема лечения
    </button>

    <!-- Используем компонент модального окна -->
    <TreatmentModal
        isOpen={isModalOpen}
        onClose={toggleModal}
        maxWidth={modalMaxWidth}
        backgroundColor={modalBgColor}
        borderRadius={modalBorderRadius}
        overlayColor={modalOverlayColor}
    >
        <div class="modal-grid">
            <div class="medication-form-column">
                {#if !isCreatingNewScheme}
                    <!-- Используем компонент для списка существующих схем -->
                    <ExistingSchemes 
                        schemes={existingSchemes}
                        onSelect={selectExistingScheme}
                        onEdit={editExistingScheme}
                        bgColor={schemesBgColor}
                        titleColor={schemesTitleColor}
                        borderColor={schemesBorderColor}
                    />

                    <!-- Используем компонент для кнопки создания схемы -->
                    <CreateSchemeButton 
                        onClick={startNewScheme}
                        buttonBgColor={createButtonBgColor}
                        buttonTextColor={createButtonTextColor}
                        buttonHoverColor={createButtonHoverColor}
                        buttonBorderRadius={createButtonBorderRadius}
                    />
                {:else}
                    <h2>
                        {#if currentEditingScheme}
                        Редактирование схемы: {currentEditingScheme.name}
                        {:else}
                        Добавление препарата
                        {/if}
                    </h2>
                    
                    <!-- Форма добавления медикамента -->
                    <select 
                        bind:value={medicationForm.medication}
                        class="form-control"
                    >
                        {#each medications as med}
                            <option value={med}>{med.name}</option>
                        {/each}
                    </select>

                    <div class="administration-type">
                        <label>
                            <input 
                                type="radio" 
                                value="в/м"
                                bind:group={medicationForm.administrationType}
                            > 
                            Внутримышечно
                        </label>
                        <label>
                            <input 
                                type="radio" 
                                value="в/в"
                                bind:group={medicationForm.administrationType}
                            > 
                            Внутривенно
                        </label>
                    </div>

                    <input 
                        type="text" 
                        placeholder="Дозировка препарата"
                        bind:value={medicationForm.dosage}
                        class="form-control"
                    />
                    
                    <div class="diluent-choice">
                        <label>Использовать растворитель:</label>
                        <label>
                            <input 
                                type="radio" 
                                value="нет"
                                bind:group={medicationForm.hasDiluent}
                            > 
                            Нет
                        </label>
                        <label>
                            <input 
                                type="radio" 
                                value="да"
                                bind:group={medicationForm.hasDiluent}
                            > 
                            Да
                        </label>
                    </div>
                    
                    <!-- Блок растворителей -->
                    {#if medicationForm.hasDiluent === 'да'}
                        <div class="diluents-container">
                            {#each medicationForm.diluents as diluent (diluent.id)}
                                <div class="diluent-row">
                                    <select 
                                        bind:value={diluent.type}
                                        class="form-control diluent-select"
                                    >
                                        <option value="">Выберите растворитель</option>
                                        <option value="глюкоза">Глюкоза</option>
                                        <option value="физраствор">Физраствор</option>
                                    </select>
                    
                                    <input 
                                        type="text" 
                                        placeholder="Дозировка"
                                        bind:value={diluent.dosage}
                                        class="form-control diluent-dosage"
                                    />
                                    
                                    <button 
                                        class="btn-remove-diluent"
                                        on:click={() => removeDiluent(diluent.id)}
                                    >
                                        ✖
                                    </button>
                                </div>
                            {/each}
                            
                            <button 
                                class="btn-add-diluent" 
                                on:click={addDiluent}
                            >
                                + Добавить растворитель
                            </button>
                        </div>
                    {/if}

                    <button 
                        class="btn-add" 
                        disabled={!isFormValid}
                        on:click={addMedication}
                    >
                        {editingMedicationId ? 'Сохранить изменения' : 'Добавить препарат'}
                    </button>
                {/if}
            </div>

            <!-- График приема препаратов -->
            {#if isCreatingNewScheme && selectedMedications.length > 0}
                <div class="schedule-column">
                    <h2>График приема препаратов</h2>
                    
                    <div class="schedule-table">
                        <div class="schedule-header">
                            <div class="medication-column">Препарат</div>
                            {#each [1,2,3,4,5,6,7,8,9,10] as day}
                                <div class="day-header">{day}</div>
                            {/each}
                        </div>
                        {#each selectedMedications as medication (medication.id)}
                            <div class="schedule-row {!selectedDays[medication.id] || !Object.values(selectedDays[medication.id]).some(daySet => daySet.size > 0) ? 'error-highlight' : ''}">
                                <div class="medication-cell">
                                    <div class="medication-title">
                                        <strong>{medication.medication.name}</strong> {medication.administrationType}, {medication.dosage}
                                        {#if medication.hasDiluent === 'да' && medication.diluents.length > 0}
                                            {#each medication.diluents as diluent}
                                                + {diluent.type} ({diluent.dosage}) 
                                            {/each}
                                        {/if}
                                    </div>
                                    <div class="medication-actions">
                                        <button class="btn-edit-medication" on:click={() => editMedication(medication)}>
                                            ✏️
                                        </button>
                                        <button class="btn-delete-medication" on:click={() => deleteMedication(medication.id)}>
                                            🗑️
                                        </button>
                                    </div>
                                </div>
                                {#each [1,2,3,4,5,6,7,8,9,10] as day}
                                    <div 
                                        class="schedule-cell" 
                                        on:click={() => toggleDay(medication.id, 1, day)}
                                        class:selected={selectedDays[medication.id] && 
                                                        selectedDays[medication.id][1] && 
                                                        selectedDays[medication.id][1].has(day)}
                                    ></div>
                                {/each}
                            </div>
                        {/each}
                    </div>

                    <button 
                        class="btn-continue" 
                        disabled={selectedMedications.length === 0 || isLoading || !isScheduleValid}
                        on:click={publishTreatmentScheme}
                    >
                    {#if isLoading}
                      <span class="spinner"></span> Сохранение...
                    {:else}
                      Опубликовать схему
                    {/if}
                  </button>
                </div>
            {/if}
        </div>
        
        <!-- Сообщение об ошибке -->
        {#if validationError}
            <div class="validation-error">
                ⚠️ {validationError}
            </div>
        {/if}
    </TreatmentModal>
</div>

<style>
    .treatment-scheme-button {
        background-color: var(--bg-color, #007bff);
        color: var(--text-color, white);
        border: none;
        padding: 8px 12px;
        border-radius: var(--border-radius, 4px);
        cursor: pointer;
        transition: opacity 0.2s ease;
    }

    .treatment-scheme-button:hover {
        opacity: 0.9;
    }

    .modal-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .medication-form-column {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .schedule-column {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .form-control {
        width: 100%;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
    }

    .administration-type, .diluent-choice {
        display: flex;
        gap: 15px;
        margin-bottom: 10px;
    }

    .administration-type label, 
    .diluent-choice label {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .schedule-table {
        border: 1px solid #ddd;
    }

    .schedule-header {
        display: grid;
        grid-template-columns: 400px repeat(10, 1fr);
        background-color: #f0f0f0;
        text-align: center;
    }

    .day-header, .medication-column {
        padding: 5px;
        border-right: 1px solid #ddd;
    }

    .schedule-row {
        display: grid;
        grid-template-columns: 400px repeat(10, 1fr);
    }

    .medication-cell {
        gap: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        border-right: 1px solid #ddd;
        background-color: #f8f9fa;
    }

    .schedule-cell {
        width: 50px;
        border: 1px solid #ddd;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .schedule-cell:hover {
        background-color: rgba(0,123,255,0.1);
    }

    .schedule-cell.selected {
        background-color: #007bff;
    }

    .btn-add, .btn-continue {
        background-color: #2196F3;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-add:disabled, .btn-continue:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .diluents-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin-bottom: 12px;
    }

    .diluent-row {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    .diluent-select {
        flex: 3;
    }

    .diluent-dosage {
        flex: 2;
    }

    .btn-remove-diluent {
        background: #dc3545;
        color: white;
        border: none;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        font-size: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .btn-add-diluent {
        background: #6c757d;
        color: white;
        border: none;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        cursor: pointer;
        align-self: flex-start;
    }
    
    .error-highlight .medication-cell {
        background-color: #fff4f4;
        border-left: 3px solid #dc3545;
    }

    .validation-error {
        background-color: #fff3cd;
        color: #856404;
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 4px;
        border-left: 4px solid #ffc107;
        font-size: 14px;
    }
    
    .medication-actions {
        margin-top: 5px;
        display: flex;
        gap: 5px;
    }

    .btn-edit-medication, .btn-delete-medication {
        padding: 2px 5px;
        font-size: 12px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        background-color: transparent;
    }

    .btn-edit-medication:hover {
        background-color: #f0f0f0;
    }

    .btn-delete-medication:hover {
        background-color: #fff5f5;
    }
    
    .spinner {
        display: inline-block;
        width: 16px;
        height: 16px;
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 1s ease-in-out infinite;
        margin-right: 8px;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }
</style>